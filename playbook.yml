- hosts: localhost
  become: yes
  become_method: sudo
  become_user: root
  vars:
    ansible_python_interpreter: /home/ubuntu/k8s-ansible-venv/bin/python
    docker_tag: "v4.0"  # Change this to any tag you want
    container_name: "abctechnologies_ansible"
    image_name: "mahshamim/abstechnologies_ansible"
    docker_username: "mahshamim"
    docker_password: "01614747054@R!f"
    kubeconfig_path: '/home/ubuntu/.kube/config'
    deployment_file: deployment.yml
    service_file: service.yaml
    namespace: "abc-technologies-ansible" # Add your desired namespace here
    docker_host: "unix:///var/run/docker.sock"
  tasks:
    - name: Set KUBECONFIG variable
      set_fact:
        kubecfg: /home/ubuntu/.kube/config

    - name: Check if Kubeconfig file exists
      stat:
        path: "{{ kubecfg }}"
      register: kubeconfig_status

    - name: Fail if Kubeconfig does not exist
      fail:
        msg: "Kubeconfig file does not exist: {{ kubecfg }}"
      when: not kubeconfig_status.stat.exists

    - name: Copy Kubeconfig to remote machine
      copy:
        src: "{{ kubecfg }}"
        dest: "{{ kubecfg }}"

      #- name: Use Python from virtual environment
      #ansible.builtin.shell: |
      #source /home/ubuntu/k8s-ansible-venv/bin/activate && pip install kubernetes packaging
      ##args:
      #executable: /bin/bash
    - name: Use Python from virtual environment
      ansible.builtin.command: /home/ubuntu/k8s-ansible-venv/bin/pip install kubernetes packaging

    - name: Check Python Kubernetes module
      ansible.builtin.command: /home/ubuntu/k8s-ansible-venv/bin/python -c "import kubernetes"

    - name: List installed packages
      ansible.builtin.command: /home/ubuntu/k8s-ansible-venv/bin/pip list


    - name: Check if Docker is already installed
      command: docker --version
      register: docker_installed
      ignore_errors: true

    - name: Install Docker
      apt:
        name: docker.io
        state: present
      when: docker_installed.rc != 0

    - name: Start Docker Service
      service:
        name: docker
        state: started
        enabled: true

    - name: Build WAR file using Maven (if applicable)
      command: mvn clean package
      args:
        chdir: ./
      when: docker_installed.rc == 0  # Run only if Docker is installed

    - name: Build Docker Image
      command: docker build -t {{ image_name }} .

    - name: Stop existing Docker container if running
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: true

    - name: Remove existing Docker container if exists
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: true

    - name: Run Docker Container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        published_ports:
          - "9292:8080"

    - name: Log in to Docker Hub
      command: docker login -u "{{ docker_username }}" -p "{{ docker_password }}"
      no_log: true

    - name: Tag Docker image for Docker Hub
      command: docker tag {{ image_name }} "{{ image_name }}:{{ docker_tag }}"

    - name: Push Docker image to Docker Hub
      command: docker push "{{ image_name }}:{{ docker_tag }}"

    - name: Ensure Kubernetes namespace exists
      kubernetes.core.k8s:
        name: "{{ namespace }}"
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Namespace

    - name: Apply Kubernetes Deployment
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition: "{{ lookup('file', deployment_file) }}"
        namespace: "{{ namespace }}"  # Specify the namespace here

    - name: Apply Kubernetes Service
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition: "{{ lookup('file', service_file) }}"
        namespace: "{{ namespace }}"  # Specify the namespace here